#%%

from sympy import factorint, Mul, primefactors, integer_nthroot,sqrt

# %%

"""
Solution is to factor the numbers
"""


n = 209371453409249
factors = list(factorint(n).keys())
phi = (factors[0]-1) * (factors[1]-1)
ct = 10456686545496
e = 65537

print(
    pow(ct,pow(e,-1,phi),n)
)

# %%

"""
Solution is to take the third root
"""

e = 3
ct = 26480272848384180570411447917437668635135597564435407928130220812155801611065536704781892656033726277516148813916446180796750368332515779970289682282804676030149428215146347671350240386440440048832713595112882403831539777582778645411270433913301224819057222081543727263602678819745693540865806160910293144052079393615890645460901858988883318691997438568705602949652125

print(
    integer_nthroot(ct,3)
)

# %%

#  N = (p+2n)p = p^2 + 2n*p = (n>1)
from sympy.ntheory.primetest import isprime

n = 147580634323489753293359929845809744269162711624738389656368559781091872376373550523946680926986640053656986299636649554227060474806637047030664210366516923071110886989791217096397686176879839903580102664186186494340502700011534451700058696766394356683434243862634340059286684027206485211626187510035408365331

# factor n into n = (x - a)(x + a) = x^2 - a^2 via fermat factoring

start = integer_nthroot(n,2)[0] + 1
k = start

while not integer_nthroot(k**2-n,2)[1]:
    k += 1

# a**2 - n = x**2
a,suc = integer_nthroot(k**2-n,2)

assert suc

p,q = k - a ,k + a  

assert(p*q == n)

phi = (p-1) * (q-1)
ct = 83114155380920398113528390363001230258676925312387444961583288650168926739189156627924794966830188691942600492914925278455111970823264803219205732373479730515688168655448268630331033893524560820586225688036544683385168286271023319937884842719720185865536100666808380858728977030710459156438127937390110313192
e = 65537

print(
    pow(ct,pow(e,-1,phi),n)
)

# %%
